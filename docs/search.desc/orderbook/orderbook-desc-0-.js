searchState.loadedDescShard("orderbook", 0, "Orderbook Module\nAdd quantity and count to the level.\nMatches as much as possible immediately, cancels remainder.\nOnly executes if it can be fully filled immediately, …\nExpires automatically at the end of the trading day.\nPersistent order until explicitly cancelled.\nCore, single-threaded state and matching engine for the …\nAggregated data for a single price level in the order book.\nRepresents actions that can be performed on a price level…\nExecutes at the best available price, does not specify a …\nMatch (reduce) quantity at the level.\nA single order tracked by the order book.\nInternal record used to track an order’s position in the …\nRepresents a request to modify an existing order.\nRepresents the type of an order in the orderbook. …\nThread-safe public interface to the order book.\nRemove quantity and count from the level.\nRepresents an executed trade in the order book.\nRepresents one side of a trade (either bid or ask).\nAdds an order to the book and attempts to match it.\nInserts an order into the book, possibly converting it …\nInformation about the ask (sell) side of the trade.\nAsk book: price → FIFO of orders (best ask = lowest …\nInformation about the bid (buy) side of the trade.\nBid book: price → FIFO of orders (best bid = highest …\nBuilds an <code>Orderbook</code> and launches a background pruning …\nReturns <code>true</code> if a new order can be <strong>fully</strong> filled …\nReturns <code>true</code> if a new order on <code>side</code> at <code>price</code> would cross …\nCancels an order by ID.\nCancels (removes) an order by ID, repairing queues and …\nNumber of distinct orders at this price level.\nAggregated per-level stats used for FOK checks and level …\nApplies a partial or full fill to the order.\nConvenience flag set when <code>remaining_quantity == 0</code>.\nCumulative executed size.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>TradeInfo</code> for the ask (sell) side.\nReturns the <code>TradeInfo</code> for the bid (buy) side.\nReturns the cumulative filled quantity.\nReturns the initial quantity at creation.\nReturns the order’s unique identifier.\nReturns the order ID targeted by this modification.\nReturns aggregated level information (depth) for both …\nProduces aggregated depth (level infos) for bids and asks.\nReturns the current order type.\nReturns the current limit price.\nReturns the updated price.\nReturns the updated quantity.\nReturns the currently remaining (unfilled) quantity.\nReturns the order side.\nReturns the updated side.\nQuantity at creation time.\nShared, mutex-protected inner order book state (private to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the order is fully filled.\nCached index of the order’s position in its side’s …\nCentral matching loop.\nModifies an existing order using an <code>OrderModify</code> request.\nModifies an existing order by canceling and re-adding with …\nCreates a new <strong>limit</strong> order wrapped in <code>Arc&lt;Mutex&lt;_&gt;&gt;</code>.\nCreates a new <code>OrderModify</code> request.\nCreates a new <code>Trade</code> from the given bid and ask trade …\nCreates a new <code>Orderbook</code> with pre-populated bid/ask maps.\nConstructs a new inner order book from initial bid/ask …\nCreates a new <strong>market</strong> order wrapped in <code>Arc&lt;Mutex&lt;_&gt;&gt;</code>.\nHook invoked on successful add; updates aggregates.\nHook invoked on successful cancel; updates aggregates.\nHook invoked on each match; decrements or removes level …\nShared, mutable pointer to the underlying order.\nUnique identifier assigned by the client/system.\nUnique identifier of the order to be modified.\nIdentifier of the order participating in the trade.\nLimit/market/GTC classification for matching behavior.\nFast lookup: order id → (pointer + cached …\nLimit price. For market orders created via …\nNew price for the order.\nExecution price for this side of the trade.\nPrice of the order.\nBackground loop that cancels Good-For-Day orders at a …\nNew total quantity for the order.\nExecuted quantity for this side of the trade.\nTotal aggregated quantity at this price level.\nShares/contracts not yet executed.\nRemoves an order from the side/price queue and fixes …\nBuy or Sell.\nNew side (buy or sell) for the order.\nSide (buy or sell) of the order.\nReturns the total number of live orders in the book.\nReturns the count of live orders tracked by the book.\nConverts a <strong>market</strong> order into <strong>good-till-cancel</strong> with a …\nConverts this modification into a fresh <code>Order</code> instance …\nUpdates per-level aggregates after adds/matches/cancels.")